use clap::Parser;
use clap::Subcommand;

use super::node_modules_link::NodeModulesLinkCommand;
use crate::config::Config;

#[derive(Debug, Subcommand, Clone)]
pub enum NodeModulesCommandType {
  /// Link a specified version of Atlaspack into node_modules
  Link(NodeModulesLinkCommand),
  /// Scans node_modules recursively for all instances of Atlaspack
  Scan,
  /// Traverse node_modules recursively and ensure only one version of Atlaspack is installed
  Dedupe,
}

#[derive(Debug, Parser)]
pub struct NodeModulesCommand {
  #[clap(subcommand)]
  pub command: NodeModulesCommandType,
}

pub async fn main(
  config: Config,
  cmd: NodeModulesCommand,
) -> anyhow::Result<()> {
  match cmd.command {
    NodeModulesCommandType::Link(cmd) => {
      super::node_modules_link::node_modules_link(config, cmd).await
    }
    NodeModulesCommandType::Scan => todo!(),
    NodeModulesCommandType::Dedupe => todo!(),
  }
}
