use clap::Parser;

use crate::config::Config;
use crate::platform::origin::InstallOrigin;

#[derive(Debug, Parser, Clone)]
pub struct NodeModulesLinkCommand {
  /// Target version to install
  pub version: Option<String>,

  #[arg(short = 'o', long = "origin")]
  pub origin: Option<InstallOrigin>,
}

pub async fn node_modules_link(
  config: Config,
  mut cmd: NodeModulesLinkCommand,
) -> anyhow::Result<()> {
  // Try use .apvmrc if available
  if cmd.origin.is_none() && cmd.version.is_none() {
    let Some(apvm_rc) = config.apvm_rc.clone() else {
      return Err(anyhow::anyhow!("No version specified"));
    };

    cmd.version = apvm_rc.specifier;
    cmd.origin = Some(apvm_rc.origin);
  }

  // Use the default origin if only the version is specified
  if cmd.origin.is_none() && cmd.version.is_some() {
    cmd.origin = Some(InstallOrigin::default())
  }

  let Some(version) = cmd.version else {
    return Err(anyhow::anyhow!("No version specified"));
  };

  let Some(origin) = cmd.origin else {
    return Err(anyhow::anyhow!("No version specified"));
  };

  // Default to
  // if cmd.origin.is_none() {
  //   return Box::pin(node_modules_link(config, NodeModulesLinkCommand{
  //     version: Some(version),
  //     origin: Some(InstallOrigin::default()),
  //   })).await
  // }

  // match cmd.origin {
  //   Some(version) => {
  //     println!("{}", version)
  //   }
  //   None => {
  //     let active = ActivePackage::try_active_or_global(&config)?;
  //   }
  // };

  // dbg!(&active);
  Ok(())
}
